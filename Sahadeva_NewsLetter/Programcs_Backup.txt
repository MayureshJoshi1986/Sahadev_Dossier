using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.IO;
using System.Configuration;
using System.Data;
using System.Threading;
using System.Net.Mail;
using System.Web;

namespace Sahadeva_NewsLetter
{
    class Program
    {
        static void Main(string[] args)
        {
            try
            {

                TimeLog("Sltart Fetch_NLIDs");
                DataTable NLIDS = new DAL().Fetch_NLIDs();
                TimeLog("End Fetch_NLIDs");

                if (NLIDS != null)
                {
                    for (int i = 0; i < NLIDS.Rows.Count; i++)
                    {
                        try
                        {

                            TimeLog("Start " + NLIDS.Rows[i]["NLID"]);

                            TimeLog("Start FetchDataByNLID");
                            //DataSet DataSet = new DAL().FetchDataByNLID(Convert.ToInt32(NLIDS.Rows[i]["NLID"]));
                            DataSet DataSet = new DAL().FetchDataByNLID(2);

                            TimeLog("End FetchDataByNLID");


                            if (DataSet != null)
                            {
                                if (DataSet.Tables.Count > 0)
                                {
                                    TimeLog("Create NL Start");

                                    DataTable dtMainBody = DataSet.Tables[0];
                                    DataRow dr1 = dtMainBody.Rows[0];
                                    string Newsletter_Html = File.ReadAllText(ConfigurationManager.AppSettings["Newsletter_Html"]);

                                    Newsletter_Html = Newsletter_Html.Replace("#EntityLogoUrl#", Convert.ToString(dr1["Logo"]));
                                    Newsletter_Html = Newsletter_Html.Replace("#EntityName#", Convert.ToString(dr1["EntityName"]));
                                    Newsletter_Html = Newsletter_Html.Replace("#NewsLetterTitle#", Convert.ToString(dr1["Title"]));
                                    Newsletter_Html = Newsletter_Html.Replace("#NewsLetterDate#", Convert.ToDateTime(Convert.ToString(dr1["Date"])).ToString("dd-MMMM-yyyy"));

                                    DataTable dtEntity = DataSet.Tables[1];
                                    Int32 Sections = Convert.ToInt32(dtEntity.Rows[0]["Count_Sections"].ToString());

                                    Int32 CurrentTableCount = 1;

                                    StringBuilder Loop_TitleInfoSection = new StringBuilder();

                                    if (Sections > 0)
                                    {
                                        //this for loop for Sections(client/Conpetitor/Industry)
                                        for (int j = 0; j < Sections; j++)
                                        {
                                            CurrentTableCount = CurrentTableCount + 1;

                                            string TitleInfoSection = File.ReadAllText(ConfigurationManager.AppSettings["TitleInfoSection"]);

                                            DataTable dtSection = DataSet.Tables[CurrentTableCount];
                                            DataRow dr2 = dtSection.Rows[0];

                                            TitleInfoSection = TitleInfoSection.Replace("#EntityName#", Convert.ToString(dr2["EntityName"]));

                                            // Split the string into a list using "<br>" as the delimiter
                                            List<string> statementList = new List<string>(Convert.ToString(dr2["Summary"]).Split(new string[] { "<br>" }, StringSplitOptions.RemoveEmptyEntries));

                                            // Remove leading and trailing whitespaces from each statement
                                            statementList = statementList.ConvertAll(statement => statement.Trim());

                                            StringBuilder EntityDescription = new StringBuilder();
                                            // Print the statements in the list
                                            EntityDescription.Append("<ul>");
                                            foreach (var statement in statementList)
                                            {
                                                EntityDescription.Append("<li>" + statement + "</li>");
                                            }
                                            EntityDescription.Append("</ul>");

                                            TitleInfoSection = TitleInfoSection.Replace("#EntityDescription#", Convert.ToString(EntityDescription));


                                            StringBuilder ClientSection = new StringBuilder();

                                            //this for loop for tables (online/print), count in for loop should be increased when another source added in future
                                            for (int l = 0; l < 2; l++)
                                            {
                                                CurrentTableCount = CurrentTableCount + 1;

                                                if (DataSet.Tables[CurrentTableCount] != null)
                                                {
                                                    if (DataSet.Tables[CurrentTableCount].Rows.Count > 0)
                                                    {
                                                        if (DataSet.Tables[CurrentTableCount].Rows[0]["SectionTitle"].ToString() != null)
                                                        {

                                                            DataTable dtSectionHeading = DataSet.Tables[CurrentTableCount];
                                                            DataRow dr3 = dtSectionHeading.Rows[0];

                                                            string SectionHeading = File.ReadAllText(ConfigurationManager.AppSettings["SectionHeading"]);

                                                            SectionHeading = SectionHeading.Replace("#SectionTitle#", Convert.ToString(dr3["SectionTitle"]));

                                                            string SectionRows = string.Empty;

                                                            StringBuilder Loop = new StringBuilder();

                                                            if (DataSet.Tables[CurrentTableCount] != null)
                                                            {
                                                                DataTable dtLoop = DataSet.Tables[CurrentTableCount];

                                                                //this for loop for articles data in each table
                                                                for (int k = 0; k < dtLoop.Rows.Count; k++)
                                                                {
                                                                    DataRow dr4 = dtLoop.Rows[k];

                                                                    string SectionRow_Cluster = File.ReadAllText(ConfigurationManager.AppSettings["SectionRow_Cluster"]);

                                                                    SectionRow_Cluster = SectionRow_Cluster.Replace("#ClusterName#", Convert.ToString(dr4["Cluster"]));

                                                                    if (k>0 && Convert.ToString(dtLoop.Rows[k-1]["Cluster"]).ToLower()== Convert.ToString(dr4["Cluster"]).ToLower())
                                                                    {
                                                                        string VarLoop = File.ReadAllText(ConfigurationManager.AppSettings["SectionRow"]);
                                                                        VarLoop = VarLoop.Replace("#SrNo#", Convert.ToString(k + 1));
                                                                        VarLoop = VarLoop.Replace("#Headline#", Convert.ToString(dr4["Headline"]));
                                                                        VarLoop = VarLoop.Replace("#URL#", Convert.ToString(dr4["URL"]));
                                                                        VarLoop = VarLoop.Replace("#Summary#", Convert.ToString(dr4["Summary"]).Length > 80 ? Convert.ToString(dr4["Summary"]).Substring(0, 80) + "...." : Convert.ToString(dr4["Summary"]));
                                                                        VarLoop = VarLoop.Replace("#Sentiment#", Convert.ToString(dr4["Sentiment"]));
                                                                        VarLoop = VarLoop.Replace("#SentimentColor#", Convert.ToString(dr4["SentimentColor"]));
                                                                        VarLoop = VarLoop.Replace("#Publication#", Convert.ToString(dr4["Publication"]));
                                                                        VarLoop = VarLoop.Replace("#ArticleType#", Convert.ToString(dr4["ArticleType"]) == "" ? Convert.ToString(dr4["ArticleType"]) : Convert.ToString(dr4["ArticleType"]).Remove(Convert.ToString(dr4["ArticleType"]).Length - 2));

                                                                        Loop.Append(VarLoop);
                                                                    }
                                                                    else
                                                                    {
                                                                        Loop.Append(SectionRow_Cluster);

                                                                        string VarLoop = File.ReadAllText(ConfigurationManager.AppSettings["SectionRow"]);
                                                                        VarLoop = VarLoop.Replace("#SrNo#", Convert.ToString(k + 1));
                                                                        VarLoop = VarLoop.Replace("#Headline#", Convert.ToString(dr4["Headline"]));
                                                                        VarLoop = VarLoop.Replace("#URL#", Convert.ToString(dr4["URL"]));
                                                                        VarLoop = VarLoop.Replace("#Summary#", Convert.ToString(dr4["Summary"]).Length > 80 ? Convert.ToString(dr4["Summary"]).Substring(0, 80) + "...." : Convert.ToString(dr4["Summary"]));
                                                                        VarLoop = VarLoop.Replace("#Sentiment#", Convert.ToString(dr4["Sentiment"]));
                                                                        VarLoop = VarLoop.Replace("#SentimentColor#", Convert.ToString(dr4["SentimentColor"]));
                                                                        VarLoop = VarLoop.Replace("#Publication#", Convert.ToString(dr4["Publication"]));
                                                                        //VarLoop = VarLoop.Replace("#ArticleType#", Convert.ToString(dr4["ArticleType"]));
                                                                        VarLoop = VarLoop.Replace("#ArticleType#", Convert.ToString(dr4["ArticleType"]) == "" ? Convert.ToString(dr4["ArticleType"]) : Convert.ToString(dr4["ArticleType"]).Remove(Convert.ToString(dr4["ArticleType"]).Length - 2));


                                                                        Loop.Append(VarLoop);
                                                                    }                                                                    

                                                                }

                                                                SectionHeading = SectionHeading.Replace("#SectionRows#", Convert.ToString(Loop));
                                                            }
                                                            ClientSection.Append(SectionHeading);
                                                        }
                                                    }

                                                }
                                            }
                                            TitleInfoSection = TitleInfoSection.Replace("#ClientSection#", Convert.ToString(ClientSection));

                                            Loop_TitleInfoSection.Append(TitleInfoSection);


                                        }

                                        Newsletter_Html = Newsletter_Html.Replace("#TitleInfoSection#", Convert.ToString(Loop_TitleInfoSection));

                                    }

                                    //SectionHeading = SectionHeading.Replace("#SectionRows#", SectionRows);

                                    //string ClientSection=SectionHeading+""+"";

                                    //Newsletter_Html = Newsletter_Html.Replace("#ClientSection#", ClientSection);

                                    TimeLog("Create NL End");

                                    //SendMail(Convert.ToString(dr1["EmailIdsTo"]) + ",ashish.jaokar@adfactorspr.com", Newsletter_Html, "Dossier Generator - " + Convert.ToString(dr1["EntityName"]), "", Convert.ToString(dr1["EmailIdsCC"]), Convert.ToString(dr1["EmailIdsBCC"]));
                                    SendMail(Convert.ToString(dr1["EmailIdsTo"]), Newsletter_Html, "Dossier Generator - " + Convert.ToString(dr1["EntityName"]), "", Convert.ToString(dr1["EmailIdsCC"]), Convert.ToString(dr1["EmailIdsBCC"]));


                                    TimeLog("Mail Sent");

                                }

                            }


                            //new IIA.DAL.IIADAL().Update_NotifiedFlag_PPO(Convert.ToInt32(APIDs.Rows[i]["APID"]));

                            //TimeLog("End " + APIDs.Rows[i]["APID"]);
                        }
                        catch (Exception ex)
                        {
                            ErrorLog("Process For Loop JobID is " + NLIDS.Rows[i]["NLID"], ex.ToString());
                            Thread.Sleep(5000);
                        }
                    }
                }

            }
            catch (Exception exx)
            {
                ErrorLog("Main", exx.ToString());
            }

        }

        //For error logging
        private static void ErrorLog(string functionName, string error)
        {
            try
            {
                string LogPath = ConfigurationManager.AppSettings["ErrorLogPath"];
                using (TextWriter myWriter = File.AppendText(LogPath))
                {

                    TextWriter.Synchronized(myWriter).WriteLine("<--> :{0}", string.Empty);
                    TextWriter.Synchronized(myWriter).WriteLine("Function Name :{0}", functionName);
                    TextWriter.Synchronized(myWriter).WriteLine("Error :{0}", error);
                    TextWriter.Synchronized(myWriter).WriteLine("Date :{0}", DateTime.Now.ToString());
                    TextWriter.Synchronized(myWriter).WriteLine("<--> :{0}", string.Empty);
                    TextWriter.Synchronized(myWriter).Flush();
                    TextWriter.Synchronized(myWriter).Close();
                }
            }
            catch (Exception ex)
            {
            }
        }

        //For debugging purpose
        private static void TimeLog(string strtext)
        {
            try
            {
                string LogPath = ConfigurationManager.AppSettings["TimeLogPath"];
                using (TextWriter myWriter = File.AppendText(LogPath))
                {

                    TextWriter.Synchronized(myWriter).WriteLine("<--> :{0}", string.Empty);
                    TextWriter.Synchronized(myWriter).WriteLine("TimeLog :{0}", strtext);
                    TextWriter.Synchronized(myWriter).WriteLine("Date :{0}", DateTime.Now.ToString());
                    TextWriter.Synchronized(myWriter).WriteLine("<--> :{0}", string.Empty);
                    TextWriter.Synchronized(myWriter).Flush();
                    TextWriter.Synchronized(myWriter).Close();
                }
            }
            catch (Exception ex)
            {
                ErrorLog("TimeLog", ex.ToString());
            }
        }


        private static bool SendMail(string ToMailID, string Body, string Subject, string FilePath, string CCMailID, string BCCMailID)
        {

            TimeLog("ToMailID " + ToMailID);

            #region Log
            //TimeLog("Body " + Body);
            TimeLog("Subject " + Subject);
            TimeLog("CCMailID " + CCMailID);
            TimeLog("BCCMailID " + BCCMailID);
            #endregion

            bool IsSent = false;
            try
            {
                //Get From App Config From MailID
                string FromMailID = ConfigurationManager.AppSettings["FromMailAddress"].ToString();
                //Set From Mail ID To MailAddress Properties
                MailAddress ObjFrom = new MailAddress(FromMailID, ConfigurationManager.AppSettings["FromDisplayName"].ToString());
                //Call the refrence of ddll system.net.mail.MailMessage which help to send you mail
                System.Net.Mail.MailMessage mails = new System.Net.Mail.MailMessage();
                //Define all proprties related mail configration
                //Set from mail ID here
                mails.From = ObjFrom;
                //Multiple TO Mailid which available comma sepreated the split bu (,)
                string[] SplitTOMailID = ToMailID.Split(',');
                //if array is available the using foreach loop get one by one id 
                foreach (string ToMailIDValues in SplitTOMailID)
                {
                    //Check here if id is not null or blank
                    if (!string.IsNullOrEmpty(ToMailIDValues))
                    {
                        //Here add in To MailID Properites
                        mails.To.Add(ToMailIDValues);
                    }
                }
                //Multiple CC Mailid which available comma sepreated the split bu (,)
                string[] SplitCCMailID = CCMailID.Split(',');
                foreach (string CCMailIDValues in SplitCCMailID)
                {
                    //Check here if id is not null or blank
                    if (!string.IsNullOrEmpty(CCMailIDValues))
                    {
                        //Here add in CC MailID Properites
                        mails.CC.Add(CCMailIDValues);
                    }
                }
                //Multiple BCC Mailid which available comma sepreated the split bu (,)
                string[] SplitBCCMailID = BCCMailID.Split(',');
                foreach (string CCMailIDValues in SplitBCCMailID)
                {
                    //Check here if id is not null or blank
                    if (!string.IsNullOrEmpty(CCMailIDValues))
                    {
                        //Here add in BCC MailID Properites
                        mails.Bcc.Add(CCMailIDValues);
                    }
                }
                // Set Subject
                mails.Subject = Subject.Replace('\r', ' ').Replace('\n', ' ');
                mails.Subject = HttpUtility.HtmlDecode(mails.Subject);
                //if Set html body then always set true
                mails.IsBodyHtml = true;
                //set Message Body
                mails.Body = Body;

                #region Attachment
                //attachment file is exist or not check
                if (File.Exists(FilePath))
                {
                    //if yes the attach the excel sheet
                    Attachment attach = new Attachment(FilePath);
                    //add in mail
                    mails.Attachments.Add(attach);
                }
                #endregion


                //Call SMTP as alias objSMTP
                SmtpClient objSMTP = new SmtpClient();

                //SET SMTP Host from mail Config
                objSMTP.Host = ConfigurationManager.AppSettings["MailServer"].ToString();
                //SET SMTP Port From Mail Config
                objSMTP.Port = Convert.ToInt32(ConfigurationManager.AppSettings["MailPort"]);
                //SET SMTP Userdefault credentails
                objSMTP.UseDefaultCredentials = true;


                TimeLog("Sending Mail To Server");
                // and finally send mail
                objSMTP.Send(mails);
                TimeLog("Mail Sent");
                IsSent = true;
            }
            //catch (SmtpException ex)
            //{
            //    ErrorLog("SendMail ", ex.ToString() + " ->> " + ex.Message + " ->> " + ex.StackTrace);
            //    //SendMail(ConfigurationManager.AppSettings["MailErrorID"].ToString(), ex.ToString(), "Error In SendMail Function", "", "", "");
            //}
            catch (Exception ex)
            {
                ErrorLog("SendMail ", ex.ToString() + " ->> " + ex.Message + " ->> " + ex.StackTrace);

                //throw err;
            }

            return IsSent;
        }
    }
}
